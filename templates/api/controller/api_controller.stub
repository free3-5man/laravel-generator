<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest as CreateModelAPIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest as UpdateModelAPIRequest;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository as ModelRepository;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use InfyOm\Generator\Criteria\LimitOffsetCriteria;
use Prettus\Repository\Criteria\RequestCriteria;
use Response;

$DOC_CONTROLLER$
class $MODEL_NAME$APIController extends AppBaseController
{
    /** @var  ModelRepository */
    private $repository;

    public function __construct(ModelRepository $repository)
    {
        $this->repository = $repository;
    }

    $DOC_INDEX$
    public function index(Request $request)
    {
        $this->repository->pushCriteria(new RequestCriteria($request));
        $this->repository->pushCriteria(new LimitOffsetCriteria($request));
        $$MODEL_NAME_PLURAL_CAMEL$ = $this->repository->paginate();

        return $this->sendResponse($$MODEL_NAME_PLURAL_CAMEL$->toArray(), '$MODEL_NAME_PLURAL_HUMAN$ retrieved successfully');
    }

    $DOC_STORE$
    public function store(CreateModelAPIRequest $request)
    {
        $input = $request->all();

        $$MODEL_NAME_PLURAL_CAMEL$ = $this->repository->create($input);

        return $this->sendResponse($$MODEL_NAME_PLURAL_CAMEL$->toArray(), '$MODEL_NAME_HUMAN$ saved successfully');
    }

    $DOC_SHOW$
    public function show($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), '$MODEL_NAME_HUMAN$ retrieved successfully');
    }

    $DOC_UPDATE$
    public function update($id, UpdateModelAPIRequest $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        $$MODEL_NAME_CAMEL$ = $this->repository->update($input, $id);

        return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), '$MODEL_NAME$ updated successfully');
    }

    $DOC_DESTROY$
    public function destroy($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        $$MODEL_NAME_CAMEL$->delete();

        return $this->sendResponse($id, '$MODEL_NAME_HUMAN$ deleted successfully');
    }
}
